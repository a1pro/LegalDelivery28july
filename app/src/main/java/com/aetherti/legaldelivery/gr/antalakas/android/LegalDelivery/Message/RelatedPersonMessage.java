package com.aetherti.legaldelivery.gr.antalakas.android.LegalDelivery.Message;
// Generated by proto2javame, Wed Nov 21 12:25:56 IST 2012.

import java.io.IOException;
import java.io.InputStream;

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

public final class RelatedPersonMessage extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final String RelatedPersonID;
	private static final int fieldNumberRelatedPersonID = 1;

	private final String LegalDeliveryID;
	private static final int fieldNumberLegalDeliveryID = 2;

	private final String Fullname;
	private static final int fieldNumberFullname = 3;


	public static Builder newBuilder() {
		return new Builder();
	}

	private RelatedPersonMessage(final Builder builder) {
		if (builder.hasRelatedPersonID && builder.hasLegalDeliveryID && builder.hasFullname ) {
			this.RelatedPersonID = builder.RelatedPersonID;
			this.LegalDeliveryID = builder.LegalDeliveryID;
			this.Fullname = builder.Fullname;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				" RelatedPersonID:" + builder.hasRelatedPersonID + " LegalDeliveryID:" + builder.hasLegalDeliveryID + " Fullname:" + builder.hasFullname + "");
		}
	}

	public static class Builder {
		private String RelatedPersonID;
		private boolean hasRelatedPersonID = false;

		private String LegalDeliveryID;
		private boolean hasLegalDeliveryID = false;

		private String Fullname;
		private boolean hasFullname = false;


		private Builder() {
		}

		public Builder setRelatedPersonID(final String RelatedPersonID) {
			this.RelatedPersonID = RelatedPersonID;
			this.hasRelatedPersonID = true;
			return this;
		}

		public Builder setLegalDeliveryID(final String LegalDeliveryID) {
			this.LegalDeliveryID = LegalDeliveryID;
			this.hasLegalDeliveryID = true;
			return this;
		}

		public Builder setFullname(final String Fullname) {
			this.Fullname = Fullname;
			this.hasFullname = true;
			return this;
		}

		public RelatedPersonMessage build() {
			return new RelatedPersonMessage(this);
		}
	}

	public String getRelatedPersonID() {
		return RelatedPersonID;
	}

	public String getLegalDeliveryID() {
		return LegalDeliveryID;
	}

	public String getFullname() {
		return Fullname;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "RelatedPersonID = " + this.RelatedPersonID + TAB;
		retValue += "LegalDeliveryID = " + this.LegalDeliveryID + TAB;
		retValue += "Fullname = " + this.Fullname + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberRelatedPersonID, RelatedPersonID);
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberLegalDeliveryID, LegalDeliveryID);
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberFullname, Fullname);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeString(fieldNumberRelatedPersonID, RelatedPersonID);
		writer.writeString(fieldNumberLegalDeliveryID, LegalDeliveryID);
		writer.writeString(fieldNumberFullname, Fullname);
		writer.writeData();
	}

	static RelatedPersonMessage parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final RelatedPersonMessage.Builder builder = RelatedPersonMessage.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}
		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberRelatedPersonID:
				builder.setRelatedPersonID(reader.readString(fieldNumber));
				break;
			case fieldNumberLegalDeliveryID:
				builder.setLegalDeliveryID(reader.readString(fieldNumber));
				break;
			case fieldNumberFullname:
				builder.setFullname(reader.readString(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		RelatedPersonMessage.unknownTagHandler = unknownTagHandler;
	}

	public static RelatedPersonMessage parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static RelatedPersonMessage parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static RelatedPersonMessage parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}