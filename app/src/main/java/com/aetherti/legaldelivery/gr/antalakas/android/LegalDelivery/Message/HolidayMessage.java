package com.aetherti.legaldelivery.gr.antalakas.android.LegalDelivery.Message;
// Generated by proto2javame, Wed Nov 21 12:25:56 IST 2012.

import java.io.IOException;
import java.io.InputStream;

import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.UninitializedMessageException;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.output.OutputWriter;

public final class HolidayMessage extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final String HolidayID;
	private static final int fieldNumberHolidayID = 1;

	private final int HolidayYear;
	private static final int fieldNumberHolidayYear = 2;

	private final String HolidayDate;
	private static final int fieldNumberHolidayDate = 3;

	private final String HolidayDescription;
	private static final int fieldNumberHolidayDescription = 4;


	public static Builder newBuilder() {
		return new Builder();
	}

	public HolidayMessage(final Builder builder) {
		if (builder.hasHolidayID && builder.hasHolidayYear && builder.hasHolidayDate && builder.hasHolidayDescription ) {
			this.HolidayID = builder.HolidayID;
			this.HolidayYear = builder.HolidayYear;
			this.HolidayDate = builder.HolidayDate;
			this.HolidayDescription = builder.HolidayDescription;
		} else {
			throw new UninitializedMessageException("Not all required fields were included (false = not included in message), " + 
				" HolidayID:" + builder.hasHolidayID + " HolidayYear:" + builder.hasHolidayYear + " HolidayDate:" + builder.hasHolidayDate + " HolidayDescription:" + builder.hasHolidayDescription + "");
		}
	}

	public static class Builder {
		private String HolidayID;
		private boolean hasHolidayID = false;

		private int HolidayYear;
		private boolean hasHolidayYear = false;

		private String HolidayDate;
		private boolean hasHolidayDate = false;

		private String HolidayDescription;
		private boolean hasHolidayDescription = false;


		private Builder() {
		}

		public Builder setHolidayID(final String HolidayID) {
			this.HolidayID = HolidayID;
			this.hasHolidayID = true;
			return this;
		}

		public Builder setHolidayYear(final int HolidayYear) {
			this.HolidayYear = HolidayYear;
			this.hasHolidayYear = true;
			return this;
		}

		public Builder setHolidayDate(final String HolidayDate) {
			this.HolidayDate = HolidayDate;
			this.hasHolidayDate = true;
			return this;
		}

		public Builder setHolidayDescription(final String HolidayDescription) {
			this.HolidayDescription = HolidayDescription;
			this.hasHolidayDescription = true;
			return this;
		}

		public HolidayMessage build() {
			return new HolidayMessage(this);
		}
	}

	public String getHolidayID() {
		return HolidayID;
	}

	public int getHolidayYear() {
		return HolidayYear;
	}

	public String getHolidayDate() {
		return HolidayDate;
	}

	public String getHolidayDescription() {
		return HolidayDescription;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "HolidayID = " + this.HolidayID + TAB;
		retValue += "HolidayYear = " + this.HolidayYear + TAB;
		retValue += "HolidayDate = " + this.HolidayDate + TAB;
		retValue += "HolidayDescription = " + this.HolidayDescription + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberHolidayID, HolidayID);
		totalSize += ComputeSizeUtil.computeIntSize(fieldNumberHolidayYear, HolidayYear);
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberHolidayDate, HolidayDate);
		totalSize += ComputeSizeUtil.computeStringSize(fieldNumberHolidayDescription, HolidayDescription);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeString(fieldNumberHolidayID, HolidayID);
		writer.writeInt(fieldNumberHolidayYear, HolidayYear);
		writer.writeString(fieldNumberHolidayDate, HolidayDate);
		writer.writeString(fieldNumberHolidayDescription, HolidayDescription);
		writer.writeData();
	}

	static HolidayMessage parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final HolidayMessage.Builder builder = HolidayMessage.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberHolidayID:
				builder.setHolidayID(reader.readString(fieldNumber));
				break;
			case fieldNumberHolidayYear:
				builder.setHolidayYear(reader.readInt(fieldNumber));
				break;
			case fieldNumberHolidayDate:
				builder.setHolidayDate(reader.readString(fieldNumber));
				break;
			case fieldNumberHolidayDescription:
				builder.setHolidayDescription(reader.readString(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		HolidayMessage.unknownTagHandler = unknownTagHandler;
	}

	public static HolidayMessage parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static HolidayMessage parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static HolidayMessage parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}